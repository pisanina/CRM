


Create Table System.IC_IndividualClient
( 
  ID NUMBER(5,0) Generated by Default ON NULL AS Identity MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE Primary Key,
  NAME Varchar2(255 Byte),
  EMail Varchar2(50 Byte),
  Street Varchar2(50 Byte),
  City Varchar2(50 Byte),
  PostalCode Varchar2(6 Byte)
)
Drop Table  System.IC_IndividualClient;

ALter Table System.IC_IndividualClient
Add TypeId Number(1,0);

ALter Table System.IC_IndividualClient
Add Foreign Key (TypeId) References System.IC_ClientType(ID);

exec DBMS_RESULT_CACHE.FLUSH



Insert into System.IC_IndividualClient (NAME, EMail, Street, City, PostalCode, TypeId) values ('Tomasz Wozniak','tom@a.com', 'Malinowa 3','Radom', '09169', null);  



       CREATE OR REPLACE PROCEDURE SYSTEM.Add_IndividualClient   
    (  
      IC_Name IN Varchar2,
      IC_EMail IN Varchar2,
      IC_Street IN Varchar2,
      IC_City IN Varchar2,
      IC_PostalCode IN Varchar2,
      IC_TypeID IN Number
      
    ) AS   
    BEGIN  
       
        Insert INTO  System.IC_IndividualClient (NAME, EMail, Street, City, PostalCode, TypeId) values (IC_Name,IC_EMail, IC_Street,IC_City, IC_PostalCode, IC_TypeID); 
    END;   

Select * from System.IC_IndividualClient;
Delete  from System.IC_IndividualClient;


Execute SYSTEM.Add_IndividualClient  ('aaa', 'aa@a.com', 'sdasd', 'asdasd', '11111', null);

ALTER TABLE System.IC_IndividualClient MODIFY(ID Generated as Identity (START WITH 1));

create or replace PROCEDURE  ClientsList (   
p_clients OUT SYS_REFCURSOR)  
IS  
BEGIN  
OPEN p_clients for Select * from System.IC_IndividualClient ORDER BY Name;  
END;





CREATE OR REPLACE PROCEDURE System.ClientDetails (
p_clientID IN Number,
p_client OUT SYS_REFCURSOR)  
IS  
BEGIN  
OPEN p_client for Select * from System.IC_IndividualClient where ID= p_clientID;  
END;   


variable id Number :=1;
 Select * from System.IC_IndividualClient where ID= :id


variable mycursor refcursor;
variable id Number;
exec :id :=1;
EXECute System.ClientDetails (:id, :mycursor);
print mycursor;


variable mycursor refcursor;
Execute System.ClientsList ( :mycursor );
print mycursor;


CREATE OR REPLACE PROCEDURE System.ClientUpdate (
p_id System.IC_IndividualClient.ID%Type,
p_name System.IC_IndividualClient.Name%Type,
p_email System.IC_IndividualClient.EMail%Type,
p_street System.IC_IndividualClient.Street%Type,
p_city System.IC_IndividualClient.City%Type,
p_zip System.IC_IndividualClient.PostalCode%Type,
p_type System.IC_IndividualClient.TypeId%Type
)
IS  
BEGIN  
Update  System.IC_IndividualClient 
SET 
Name = p_name,
EMail = p_email,
Street = p_street,
City = p_city,
PostalCode = p_zip,
TypeId = p_type
Where ID = p_id;

END;   

CREATE OR REPLACE PROCEDURE SYSTEM.Delete_IndividualClient   
    (  
        IC_ID IN NUMBER
     ) AS   
    BEGIN  
             Delete From  System.IC_IndividualClient Where "ID" = IC_ID;
    END;   
    



---------------SELLER------------------
create Table System.IC_Seller
(
  ID NUMBER(5,0) Generated by Default ON NULL AS Identity MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE Primary Key,
  Name Varchar2(20 Byte)
)

Drop Table System.IC_Seller;
Insert into System.IC_Seller (NAME) values ('Tom Best');  

CREATE OR REPLACE PROCEDURE SYSTEM.Add_Seller   
    (  
      IC_Name IN Varchar2
  
    ) AS   
    BEGIN  
       
        Insert INTO  System.IC_Seller (NAME) values (IC_Name); 
    END; 


Execute SYSTEM.Add_Seller ('John Snow');

Select * from System.IC_Seller;
 
Drop Table  System.IC_ClientType;

create or replace PROCEDURE  System.SellersList (   
p_sellers OUT SYS_REFCURSOR)  
IS  
BEGIN  
OPEN p_sellers for Select * from System.IC_Seller ORDER BY Name;  
END;



variable mycursor refcursor;
Execute System.SellersList ( :mycursor );
print mycursor;





-------------------------------------------------------------------------------------------

Create Table System.IC_Message
( 
  ID NUMBER(5,0) Generated by Default ON NULL AS Identity MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE Primary Key,
  
  SellerId NUMBER(5,0),
  ClientId NUMBER(5,0),
  Message Varchar2(500 Byte),
  MessageDate timestamp default sysdate not null,
  
   CONSTRAINT fk_Message_Seller
     FOREIGN KEY (SellerId)
      REFERENCES System.IC_Seller(ID),
   CONSTRAINT fk_Message_Client
    FOREIGN KEY (ClientId)
     REFERENCES System.IC_IndividualClient(ID)
 
)

Drop table System.IC_Message;

 CREATE OR REPLACE PROCEDURE SYSTEM.Add_Message   
    (  
      IC_SellerId IN NUMBER,
      IC_ClientId IN NUMBER,
      IC_Message IN Varchar2

    ) AS   
    BEGIN  
       
        Insert INTO  System.IC_Message (SellerID, ClientID, Message) values (IC_SellerId, IC_ClientId, IC_Message); 
    END;   

Execute SYSTEM.Add_Message (1,1,'New message');

Select * from System.IC_Message;

create or replace PROCEDURE  System.MessagesList (   
p_messages OUT SYS_REFCURSOR)  
IS  
BEGIN  
OPEN p_messages for Select * from System.IC_Message ORDER BY MessageDate;  
END;



---------------------ClientTypes--------------------------------------------

create Table System.IC_ClientType
(
  ID NUMBER(1,0) Primary Key 
  Name Varchar2(10 Byte)
)

Insert INTO System.IC_ClientType (ID, Name) values (1, 'Potential');
Insert INTO System.IC_ClientType (ID, Name) values (2, 'Loyal');
Insert INTO System.IC_ClientType (ID, Name) values (3,'Former');

Select * From System.IC_ClientType;

create or replace PROCEDURE ClientsTypes (   
p_types OUT SYS_REFCURSOR)  
IS  
BEGIN  
OPEN p_types for Select * from System.IC_ClientType;  
END;


create or replace PROCEDURE ClientsTypes1 (   
p_types OUT SYS_REFCURSOR)  
IS  
BEGIN  
OPEN p_types for Select * from System.IC_ClientType;  
END;

variable mycursor refcursor;
Execute System.ClientsTypes ( :mycursor );
print mycursor;







