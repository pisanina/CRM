CREATE TABLE System.IC_IndividualClient
  (
    ID NUMBER(5,0) Generated BY DEFAULT ON NULL AS Identity MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1
    START WITH 1 CACHE 20 NOORDER NOCYCLE PRIMARY KEY,
    NAME       VARCHAR2(255 Byte),
    EMail      VARCHAR2(50 Byte),
    Street     VARCHAR2(50 Byte),
    City       VARCHAR2(50 Byte),
    PostalCode VARCHAR2(6 Byte)
  )
DROP TABLE System.IC_IndividualClient;
ALTER TABLE System.IC_IndividualClient ADD TypeId NUMBER(1,0);
ALTER TABLE System.IC_IndividualClient ADD CONSTRAINT IC_email_unique UNIQUE (EMail);
ALTER TABLE System.IC_IndividualClient ADD FOREIGN KEY (TypeId) REFERENCES System.IC_ClientType(ID);

INSERT
INTO System.IC_IndividualClient
  (
    NAME,
    EMail,
    Street,
    City,
    PostalCode,
    TypeId
  )
  VALUES
  (
    'Tomasz Wozniak',
    'tom@a.com',
    'Malinowa 3',
    'Radom',
    '09169',
    NULL
  );
--------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE SYSTEM.CRM_Package
AS
type Industry_ARRAY
IS
  TABLE OF NUMBER INDEX BY BINARY_INTEGER;
  PROCEDURE Add_IndividualClient
    (
      IC_Name        IN VARCHAR2,
      IC_EMail       IN VARCHAR2,
      IC_Street      IN VARCHAR2,
      IC_City        IN VARCHAR2,
      IC_PostalCode  IN VARCHAR2,
      IC_TypeID      IN NUMBER,
      CI_IndustryIds IN CRM_Package.Industry_Array
    );
    PROCEDURE Edit_IndividualClient2
    (
     p_id System.IC_IndividualClient.ID%Type,
      p_name System.IC_IndividualClient.Name%Type,
      p_email System.IC_IndividualClient.EMail%Type,
      p_street System.IC_IndividualClient.Street%Type,
      p_city System.IC_IndividualClient.City%Type,
      p_zip System.IC_IndividualClient.PostalCode%Type,
      p_type System.IC_IndividualClient.TypeId%Type,
      p_IndustryIds IN CRM_Package.Industry_Array 
    )
    ;
  PROCEDURE  ClientsList (
      p_tosearch IN Varchar2,
      p_type IN INTEGER,
      CI_IndustryIds IN CRM_Package.Industry_Array,
      p_clients OUT SYS_REFCURSOR) ;
      
END CRM_Package;
/


CREATE OR REPLACE PACKAGE BODY CRM_Package
AS
  PROCEDURE Add_IndividualClient
    (
      IC_Name        IN VARCHAR2,
      IC_EMail       IN VARCHAR2,
      IC_Street      IN VARCHAR2,
      IC_City        IN VARCHAR2,
      IC_PostalCode  IN VARCHAR2,
      IC_TypeID      IN NUMBER,
      CI_IndustryIds IN CRM_Package.Industry_Array
    )
  IS
    lastId NUMBER(5,0);
  BEGIN
    INSERT
    INTO System.IC_IndividualClient
      (
        NAME,
        EMail,
        Street,
        City,
        PostalCode,
        TypeId
      )
      VALUES
      (
        IC_Name,
        IC_EMail,
        IC_Street,
        IC_City,
        IC_PostalCode,
        IC_TypeID
      )
    RETURNING ID
    INTO lastId;
    ForAll i IN Indices OF CI_IndustryIds
    INSERT
    INTO System.CI_ClientIndustry
      (
        ClientId,
        IndustryId
      )
      VALUES
      (
        lastId,
        CI_IndustryIds(i)
      );
  END;
  
  PROCEDURE Edit_IndividualClient2(
      p_id System.IC_IndividualClient.ID%Type,
      p_name System.IC_IndividualClient.Name%Type,
      p_email System.IC_IndividualClient.EMail%Type,
      p_street System.IC_IndividualClient.Street%Type,
      p_city System.IC_IndividualClient.City%Type,
      p_zip System.IC_IndividualClient.PostalCode%Type,
      p_type System.IC_IndividualClient.TypeId%Type,
      p_IndustryIds IN CRM_Package.Industry_Array )
  IS
  BEGIN
    UPDATE System.IC_IndividualClient
    SET Name     = p_name,
      EMail      = p_email,
      Street     = p_street,
      City       = p_city,
      PostalCode = p_zip,
      TypeId     = p_type
    WHERE ID     = p_id;
    
    Delete from System.CI_ClientIndustry Where ClientId = p_id;
    ForAll i IN Indices OF p_IndustryIds
    INSERT
    INTO System.CI_ClientIndustry
      (
        ClientId,
        IndustryId
      )
      VALUES
      (
        p_id,
         p_IndustryIds(i)
      );
    END;
    
PROCEDURE  System.ClientsList (
    p_tosearch IN Varchar2,
    p_type IN INTEGER,
    CI_IndustryIds IN CRM_Package.Industry_Array,
    p_clients OUT SYS_REFCURSOR)  
    IS  
    BEGIN  
    OPEN p_clients for Select * from System.IC_IndividualClient
    --Join  System.CI_ClientIndustry ON  System.ClientsList = System.CI_ClientIndustry(ClientId)
    
    where (UPPER(Name) LIKE UPPER('%'||p_tosearch||'%') 
    OR UPPER(EMail) LIKE UPPER('%'||p_tosearch||'%')
    OR UPPER(Street) LIKE UPPER('%'||p_tosearch||'%')
    OR UPPER(City) LIKE UPPER('%'||p_tosearch||'%'))
    AND (p_type IS Null OR TypeId = p_type)
    
    ORDER BY Name;  
END;
    
END CRM_Package;
/


DECLARE
  ids CRM_Package.Industry_ARRAY;
BEGIN
  ids(1):=1;
  ids(2):=2;
  CRM_Package.Add_IndividualClient ('kz2','kz2','kz','kz','kz',1,ids) ;
END;
/




VARIABLE mycursor refcursor;
VARIABLE tosearch Varchar2;
VARIABLE ptype INTEGER;
EXEC :tosearch :='a';
EXEC :ptype :=null;
--PRINT :tosearch
--PRINT :ptype
EXECUTE ClientsList (:tosearch, :ptype, :mycursor);
PRINT mycursor;


 Select * from System.IC_IndividualClient;
 Select * from System.IC_IndividualClient  where UPPER(Name) LIKE UPPER('%a%');
-------------------------------------------------------------------------------------------------
SELECT *
FROM CI_CLIENTINDUSTRY;
SELECT * FROM IC_individualclient;
DELETE FROM System.IC_IndividualClient;
--ALTER TABLE System.IC_IndividualClient MODIFY(ID Generated as Identity (START WITH 1));
CREATE OR REPLACE PROCEDURE ClientsList(
    p_clients OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN p_clients FOR SELECT * FROM System.IC_IndividualClient ORDER BY Name;
END;

CREATE OR REPLACE PROCEDURE System.ClientDetails(
    p_clientID IN NUMBER,
    p_client OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN p_client FOR SELECT * FROM System.IC_IndividualClient WHERE ID= p_clientID;
END;

VARIABLE id NUMBER :=1;
SELECT *
FROM System.IC_IndividualClient
WHERE ID= :id VARIABLE mycursor refcursor;

VARIABLE id NUMBER;
EXEC :id :=1;
EXECUTE System.ClientDetails (:id, :mycursor);
PRINT mycursor;

VARIABLE mycursor refcursor;
EXECUTE System.ClientsList ( :mycursor );
PRINT mycursor;



    
CREATE OR REPLACE PROCEDURE SYSTEM.Delete_IndividualClient(
      IC_ID IN NUMBER )
  AS
  BEGIN
    DELETE FROM System.IC_Message WHERE ClientId = IC_ID;
    DELETE FROM System.CI_ClientIndustry WHERE ClientId = IC_ID;
    DELETE FROM System.IC_IndividualClient WHERE ID = IC_ID;
  END;
  
EXECUTE SYSTEM.Delete_IndividualClient (5);
SELECT * FROM SYSTEM.CI_CLIENTINDUSTRY;
SELECT * FROM SYSTEM.IC_individualclient;
SELECT * FROM SYSTEM.IC_Message EXECUTE SYSTEM.Delete_IndividualClient

---------------SELLER------------------

CREATE TABLE System.IC_Seller
  (
    ID NUMBER(5,0) Generated BY DEFAULT ON NULL AS Identity MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1
    START WITH 1 CACHE 20 NOORDER NOCYCLE PRIMARY KEY,
    Name VARCHAR2(20 Byte)
  )
DROP TABLE System.IC_Seller;
INSERT INTO System.IC_Seller
  (NAME
  ) VALUES
  ('Tom Best'
  );
CREATE OR REPLACE PROCEDURE SYSTEM.Add_Seller
    (
      IC_Name IN VARCHAR2
    )
  AS
  BEGIN
    INSERT INTO System.IC_Seller
      (NAME
      ) VALUES
      (IC_Name
      );
      
  END;
  
EXECUTE SYSTEM.Add_Seller ('John Snow');
SELECT * FROM System.IC_Seller;
DROP TABLE System.IC_ClientType;
CREATE OR REPLACE PROCEDURE System.SellersList(
      p_sellers OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN p_sellers FOR SELECT * FROM System.IC_Seller ORDER BY Name;
  END;
VARIABLE mycursor refcursor;
EXECUTE System.SellersList ( :mycursor );
PRINT mycursor;

-------------------------------------------------------------------------------------------

CREATE TABLE System.IC_Message
  (
    ID NUMBER(5,0) Generated BY DEFAULT ON NULL AS Identity MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1
    START WITH 1 CACHE 20 NOORDER NOCYCLE PRIMARY KEY,
    SellerId    NUMBER(5,0),
    ClientId    NUMBER(5,0),
    MESSAGE     VARCHAR2(500 Byte),
    MessageDate TIMESTAMP DEFAULT sysdate NOT NULL,
    CONSTRAINT fk_Message_Seller FOREIGN KEY (SellerId) REFERENCES System.IC_Seller(ID),
    CONSTRAINT fk_Message_Client FOREIGN KEY (ClientId) REFERENCES System.IC_IndividualClient(ID)
  )
  
DROP TABLE System.IC_Message;
CREATE OR REPLACE PROCEDURE SYSTEM.Add_Message(
      IC_SellerId IN NUMBER,
      IC_ClientId IN NUMBER,
      IC_Message  IN VARCHAR2 )
  AS
  BEGIN
    INSERT
    INTO System.IC_Message
      (
        SellerID,
        ClientID,
        MESSAGE
      )
      VALUES
      (
        IC_SellerId,
        IC_ClientId,
        IC_Message
      );
  END;
  
EXECUTE SYSTEM.Add_Message (1,7,'New message2');
SELECT * FROM System.IC_Message;
CREATE OR REPLACE PROCEDURE System.MessagesList(
      p_messages OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN p_messages FOR SELECT * FROM System.IC_Message ORDER BY MessageDate;
  END;
CREATE OR REPLACE PROCEDURE MessagesListClient(
      p_client IN NUMBER,
      p_messages OUT SYS_REFCURSOR )
  IS
  BEGIN
    OPEN p_messages FOR SELECT System.IC_Seller.Name
  AS
    SellerName,
    SellerId,
    ClientId,
    MESSAGE,
    MessageDate,
    System.IC_Message.ID
  AS
    ID FROM System.IC_Message Inner Join System.IC_Seller ON System.IC_Message.SellerId = System.IC_Seller.ID WHERE ClientId = p_client ORDER BY MessageDate;
  END;
VARIABLE mycursor refcursor;
VARIABLE id NUMBER;
EXEC :id :=1;
EXECUTE System.MessagesListClient (:id, :mycursor);
PRINT mycursor;

---------------------ClientTypes--------------------------------------------

CREATE TABLE System.IC_ClientType
  (
    ID NUMBER(1,0) PRIMARY KEY Name VARCHAR2(10 Byte)
  )
  
INSERT INTO System.IC_ClientType
  (ID, Name
  ) VALUES
  (1, 'Potential'
  );
  
INSERT INTO System.IC_ClientType
  (ID, Name
  ) VALUES
  (2, 'Loyal'
  );
  
INSERT INTO System.IC_ClientType
  (ID, Name
  ) VALUES
  (3,'Former'
  );
  
SELECT * FROM System.IC_ClientType;
CREATE OR REPLACE PROCEDURE ClientsTypes(
      p_types OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN p_types FOR SELECT * FROM System.IC_ClientType;
  END;
CREATE OR REPLACE PROCEDURE ClientsTypes1(
      p_types OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN p_types FOR SELECT * FROM System.IC_ClientType;
  END;
VARIABLE mycursor refcursor;
EXECUTE System.ClientsTypes ( :mycursor );
PRINT mycursor;

---------------------------Products----------------------

CREATE TABLE System.IC_Product
  (
    ID INT Generated BY DEFAULT ON NULL AS Identity MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1
    START WITH 1 CACHE 20 NOORDER NOCYCLE PRIMARY KEY,
    NAME     VARCHAR2(255 Byte),
    Category INT,
    Price    NUMBER(10,4),
    Quantity INT,
    CONSTRAINT fk_Product_Category FOREIGN KEY (Category) REFERENCES System.IC_ProductCategory(ID)
  )
  
INSERT
INTO System.IC_Product
  (
    Name,
    Category,
    Price,
    Quantity
  )
  VALUES
  (
    'Shovel',
    1,
    99.9,
    100
  );
  
INSERT
INTO System.IC_Product
  (
    Name,
    Category,
    Price,
    Quantity
  )
  VALUES
  (
    'Heavy Bulldozer',
    2,
    249000,
    3
  );
  
INSERT
INTO System.IC_Product
  (
    Name,
    Category,
    Price,
    Quantity
  )
  VALUES
  (
    'Truck 12T',
    3,
    119000,
    9
  );
  
SELECT * FROM System.IC_Product;

CREATE OR REPLACE PROCEDURE SYSTEM.Add_Product(
      IC_Name     IN VARCHAR2,
      IC_Category IN INT,
      IC_Price    IN NUMBER,
      IC_Quantity IN INT )
  AS
  BEGIN
    INSERT
    INTO System.IC_Product
      (
        Name,
        Category,
        Price,
        Quantity
      )
      VALUES
      (
        IC_Name,
        IC_Category,
        IC_Price,
        IC_Quantity
      );
  END;
EXECUTE SYSTEM.Add_Product ('bucket', 1, 25, 75);





CREATE OR REPLACE PROCEDURE System.ProductsList
    (
      p_toSearch IN Varchar2,
      p_category IN Number,
      p_products OUT SYS_REFCURSOR
    )
  IS
  BEGIN
    OPEN p_products FOR SELECT System.IC_ProductCategory.Name AS
    CategoryName,
    System.IC_Product.ID,
    System.IC_Product.Name,
    Category, Price, Quantity 
    FROM System.IC_Product Inner Join System.IC_ProductCategory ON System.IC_Product.Category = System.IC_ProductCategory.ID
     where (UPPER( System.IC_Product.Name) LIKE UPPER('%'||p_toSearch||'%') )
     AND Category = p_category
    ORDER BY Name;
  END;
  
  
  
  
  
  
VARIABLE mycursor refcursor;
EXECUTE System.ProductsList ( :mycursor );
PRINT mycursor;

--------------------ProductCategory----------------------------------------------

CREATE TABLE System.IC_ProductCategory
  (
    ID INT Generated BY DEFAULT ON NULL AS Identity MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1
    START WITH 1 CACHE 20 NOORDER NOCYCLE PRIMARY KEY,
    NAME VARCHAR2(255 Byte)
  )
  
INSERT INTO System.IC_ProductCategory
  (Name
  ) VALUES
  ('Hand Tools'
  );
  
INSERT INTO System.IC_ProductCategory
  (Name
  ) VALUES
  ('Bulldozers'
  );
INSERT INTO System.IC_ProductCategory
  (Name
  ) VALUES
  ('Trucks'
  );
  
SELECT * FROM System.IC_ProductCategory;
CREATE OR REPLACE PROCEDURE System.ProductsCategoryList(
      p_productsCategory OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN p_productsCategory FOR SELECT * FROM System.IC_ProductCategory ORDER BY Name;
  END;
VARIABLE mycursor refcursor;
EXECUTE System.ProductsCategoryList ( :mycursor );
PRINT mycursor;
--------------------Industry--------------------------

DROP TABLE System.IC_Industry
CREATE TABLE System.I_Industry
  (
    ID INT Generated BY DEFAULT ON NULL AS Identity MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1
    START WITH 1 CACHE 20 NOORDER NOCYCLE PRIMARY KEY,
    NAME VARCHAR2(255 Byte)
  )
  
INSERT INTO System.I_Industry
  (Name
  ) VALUES
  ('Construction'
  );
  
INSERT INTO System.I_Industry
  (Name
  ) VALUES
  ('Energy'
  );
  
INSERT INTO System.I_Industry
  (Name
  ) VALUES
  ('Logistics'
  );
  
SELECT *
FROM I_Industry CREATE
OR REPLACE PROCEDURE System.IndustriesList ( p_industries OUT SYS_REFCURSOR) IS BEGIN OPEN p_industries FOR SELECT *
FROM System.I_Industry
ORDER BY Name;
END;
VARIABLE mycursor refcursor;
EXECUTE System.IndustriesList ( :mycursor );
PRINT mycursor;
------------------------ClientIndustry----------------------------------


CREATE TABLE System.CI_ClientIndustry
  (
    ID INT Generated BY DEFAULT ON NULL AS Identity MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1
    START WITH 1 CACHE 20 NOORDER NOCYCLE PRIMARY KEY,
    ClientId   NUMBER(5,0),
    IndustryId INT,
    CONSTRAINT fk_ClientIndustry_Client FOREIGN KEY (ClientId) REFERENCES System.IC_IndividualClient(ID),
    CONSTRAINT fk_ClientIndustry_Industry FOREIGN KEY (IndustryId) REFERENCES System.I_Industry(ID)
  )
  ALTER TABLE System.CI_ClientIndustry ADD CONSTRAINT CI_Client_Industry UNIQUE (ClientId, IndustryId);
DROP TABLE System.CI_ClientIndustry;
INSERT INTO System.CI_ClientIndustry
  (clientId, IndustryId
  ) VALUES
  (1,1
  );
  
INSERT INTO System.CI_ClientIndustry
  (clientId, IndustryId
  ) VALUES
  (1,2
  );
  
CREATE OR REPLACE PROCEDURE IndustryOfClient
    (
      p_client IN NUMBER,
      p_industries OUT SYS_REFCURSOR
    )
  IS
  BEGIN
    OPEN p_industries FOR SELECT IndustryId FROM System.CI_ClientIndustry WHERE ClientId = p_client ORDER BY IndustryId;
  END;
  
  
VARIABLE mycursor refcursor;
VARIABLE id NUMBER;
EXEC :id :=1;
EXECUTE System.IndustryOfClient (:id, :mycursor);
PRINT mycursor;
